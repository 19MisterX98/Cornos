/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Project: Cornos
# File: HologramAura
# Created by constantin at 20:51, MÃ¤r 20 2021
PLEASE READ THE COPYRIGHT NOTICE IN THE PROJECT ROOT, IF EXISTENT
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
package me.constantindev.ccl.module.EXPLOIT;

import me.constantindev.ccl.Cornos;
import me.constantindev.ccl.command.Hologram;
import me.constantindev.ccl.etc.base.Module;
import me.constantindev.ccl.etc.config.Num;
import me.constantindev.ccl.etc.config.Toggleable;
import me.constantindev.ccl.etc.helper.ClientHelper;
import me.constantindev.ccl.etc.helper.RandomHelper;
import me.constantindev.ccl.etc.helper.RenderHelper;
import me.constantindev.ccl.etc.ms.MType;
import me.constantindev.ccl.etc.render.RenderableBlock;
import me.constantindev.ccl.etc.render.RenderableLine;
import me.constantindev.ccl.module.ext.Hud;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class HologramAura extends Module {
    public static String message = "";
    BlockPos origin;
    int timer = 0;
    Num range = new Num("range", 50, 1000, 10);
    Num limit = new Num("limit", -1, 5000, -1);
    Num iterationsPerSecond = new Num("iterations", 1, 100, 1);
    Toggleable autoplace = new Toggleable("autoplace", true);
    List<RenderableLine> lineList = new ArrayList<>();
    RenderableBlock rb;

    public HologramAura() {
        super("HologramAura", "I dont even know anymore", MType.EXPLOIT);
        this.mconf.add(range);
        this.mconf.add(autoplace);
        this.mconf.add(limit);
        this.mconf.add(iterationsPerSecond);
    }

    @Override
    public void onEnable() {
        if (message.isEmpty()) {
            ClientHelper.sendChat("please only enable this via the funny items menu in your creative inventory");
            this.isOn.setState(false);
            return;
        }
        origin = Cornos.minecraft.player.getBlockPos();
        ClientHelper.sendChat("Set point of origin to highlighted block");
        super.onEnable();
    }

    @Override
    public void onExecute() {
        for (int i = 0; i < iterationsPerSecond.getValue(); i++) {
            if (origin == null) {
                this.setEnabled(false);
                return;
            }
            double range = this.range.getValue();
            Color c = Hud.themeColor.getColor();
            this.rb = new RenderableBlock(new Vec3d(origin.getX(), origin.getY(), origin.getZ()), c.getRed(), c.getGreen(), c.getBlue(), 255);
            RenderHelper.addToQueue(rb);
            Vec3d nextPos = new Vec3d(origin.getX() + RandomHelper.rndD(range) - (range / 2), origin.getY() + RandomHelper.rndD(range) - (range / 2), origin.getZ() + RandomHelper.rndD(range) - (range / 2));
            RenderableLine rl = new RenderableLine(new Vec3d(origin.getX() + .5, origin.getY() + .5, origin.getZ() + .5), nextPos, c.getRed(), c.getGreen(), c.getBlue(), 255);
            RenderHelper.addToQueue(rl);
            ItemStack bruh = Hologram.getHoloStack(nextPos, message, true, false);
            int slot = 36;
            CreativeInventoryActionC2SPacket p = new CreativeInventoryActionC2SPacket(slot, bruh);
            //Cornos.minecraft.player.inventory.setStack(Cornos.minecraft.player.playerScreenHandler.getSlot(slot).id,bruh);
            Cornos.minecraft.getNetworkHandler().sendPacket(p);
            if (autoplace.isEnabled()) {
                BlockHitResult bhr = new BlockHitResult(Vec3d.ZERO, Direction.DOWN, Cornos.minecraft.player.getBlockPos().down(), false);
                Cornos.minecraft.interactionManager.interactBlock(Cornos.minecraft.player, Cornos.minecraft.world, Hand.MAIN_HAND, bhr);

            }
        }
        super.onExecute();
    }
}
