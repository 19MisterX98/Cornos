/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Project: Cornos
# File: HologramAura
# Created by constantin at 20:51, MÃ¤r 20 2021
PLEASE READ THE COPYRIGHT NOTICE IN THE PROJECT ROOT, IF EXISTENT
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
package me.constantindev.ccl.module.EXPLOIT;

import me.constantindev.ccl.Cornos;
import me.constantindev.ccl.command.Hologram;
import me.constantindev.ccl.etc.base.Module;
import me.constantindev.ccl.etc.config.MultiOption;
import me.constantindev.ccl.etc.config.Num;
import me.constantindev.ccl.etc.config.Toggleable;
import me.constantindev.ccl.etc.event.EventHelper;
import me.constantindev.ccl.etc.event.EventType;
import me.constantindev.ccl.etc.event.arg.PacketEvent;
import me.constantindev.ccl.etc.helper.ClientHelper;
import me.constantindev.ccl.etc.helper.RandomHelper;
import me.constantindev.ccl.etc.ms.MType;
import me.constantindev.ccl.etc.render.RenderableBlock;
import me.constantindev.ccl.etc.render.RenderableLine;
import me.constantindev.ccl.module.ext.Hud;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.hit.HitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class HologramAura extends Module {
    public static String message = "";
    List<RenderableLine> bruh = new ArrayList<>();
    BlockPos origin;
    Num range = new Num("range", 50, 1000, 10);
    Num incrementor = new Num("incrementor", 0.4, 2, 0.1);
    Toggleable isEgg = new Toggleable("isEgg", true);
    Toggleable autoplace = new Toggleable("autoplace", true);
    MultiOption mode = new MultiOption("mode", "random", new String[]{"random", "circle", "sphere"});
    RenderableBlock rb;
    Vec3d lp;
    double progress = 0.0;
    List<Vec3d> spherePointList = new ArrayList<>();
    int currentIndex = 0;

    public HologramAura() {
        super("HologramAura", "I dont even know anymore", MType.EXPLOIT);
        this.mconf.add(range);
        this.mconf.add(autoplace);
        this.mconf.add(isEgg);
        this.mconf.add(mode);
        this.mconf.add(incrementor);
        Module parent = this;
        EventHelper.BUS.registerEvent(EventType.ONPACKETSEND, event -> {
            if (!parent.isOn.isOn()) return;
            PacketEvent pe = (PacketEvent) event;
            if (pe.packet instanceof PlayerInteractBlockC2SPacket) {
                newPos();
            }
        });
    }

    @Override
    public void onDisable() {
        progress = 0.0;
        currentIndex = 0;
        lp = null;
        spherePointList.clear();
        Hud.currentContext = "";
        super.onDisable();
    }

    @Override
    public void onEnable() {
        if (Cornos.minecraft.player == null) return;
        if (message.isEmpty()) {
            ClientHelper.sendChat("please only enable this via the funny items menu in your creative inventory");
            this.isOn.setState(false);
            return;
        }
        origin = Cornos.minecraft.player.getBlockPos();
        ClientHelper.sendChat("Set point of origin to highlighted block");
        double incInv = Math.abs(incrementor.getValue() - incrementor.max);
        double res = 30 * incInv;
        for (double i = 0; i <= Math.PI; i += Math.PI / res) {
            double radius = Math.sin(i) * range.getValue();
            double y = Math.cos(i) * range.getValue();
            for (double a = 0; a < Math.PI * 2; a += Math.PI / res) {
                double x = Math.cos(a) * radius;
                double z = Math.sin(a) * radius;
                spherePointList.add(new Vec3d(x, y, z));
                System.out.println("Generated position vector " + new Vec3d(x, y, z));
            }
        }
        super.onEnable();
    }

    @Override
    public void onRender(MatrixStack ms, float td) {
        if (rb != null) this.rbq.add(rb);
        this.rlq.addAll(bruh);
        super.onRender(ms, td);
    }

    @Override
    public void onExecute() {
        if (lp == null) newPos();
        bruh.clear();
        if (Cornos.minecraft.getNetworkHandler() == null) return;
        if (Cornos.minecraft.interactionManager == null) return;
        if (origin == null) {
            this.setEnabled(false);
            return;
        }
        Color c = Hud.themeColor.getColor();
        this.rb = new RenderableBlock(new Vec3d(origin.getX(), origin.getY(), origin.getZ()), c.getRed(), c.getGreen(), c.getBlue(), 255);
        RenderableLine rl = new RenderableLine(new Vec3d(origin.getX() + .5, origin.getY() + .5, origin.getZ() + .5), lp, c.getRed(), c.getGreen(), c.getBlue(), 255, 2);
        this.bruh.add(rl);
        if (autoplace.isEnabled()) {
            assert Cornos.minecraft.player != null;
            if (!Cornos.minecraft.crosshairTarget.getType().equals(HitResult.Type.BLOCK)) return;
            BlockHitResult bhr = (BlockHitResult) Cornos.minecraft.crosshairTarget;
            Cornos.minecraft.interactionManager.interactBlock(Cornos.minecraft.player, Cornos.minecraft.world, Hand.MAIN_HAND, bhr);
        }
        super.onExecute();
    }

    void newPos() {
        if (Cornos.minecraft.getNetworkHandler() == null) return;
        double range = this.range.getValue();
        switch (mode.value) {
            case "random":
                lp = new Vec3d(origin.getX() + RandomHelper.rndD(range) - (range / 2), origin.getY() + RandomHelper.rndD(range) - (range / 2), origin.getZ() + RandomHelper.rndD(range) - (range / 2));
                break;
            case "circle":
                progress += incrementor.getValue();
                Hud.currentContext = "Progress: " + (progress + " / " + 360) + " (" + Math.floor(progress / 360.0 * 100) + "%)";
                if (progress > 360) {
                    progress = 0;
                    ClientHelper.sendChat("[HologramAura] Disabled module due to finishing circle");
                    this.setEnabled(false);
                }
                double rad = Math.toRadians(progress);
                double sin = Math.sin(rad);
                double cos = Math.cos(rad);
                lp = new Vec3d(origin.getX() + sin * range, origin.getY(), origin.getZ() + cos * range);
                break;
            case "sphere":
                Vec3d sphereP = spherePointList.get(currentIndex);
                currentIndex++;
                if (currentIndex >= spherePointList.size()) {
                    currentIndex = 0;
                    this.setEnabled(false);
                }
                Hud.currentContext = "Progress: " + (currentIndex + " / " + spherePointList.size()) + " (" + Math.floor(
                        ((double) currentIndex) / ((double) spherePointList.size()) * 100) + "%)";
                lp = new Vec3d(origin.getX() + sphereP.getX(), origin.getY() + sphereP.getY(), origin.getZ() + sphereP.getZ());
                break;
        }

        ItemStack bruh = Hologram.getHoloStack(lp, message, isEgg.isEnabled(), false, "armor_stand");
        int slot = 36;
        CreativeInventoryActionC2SPacket p = new CreativeInventoryActionC2SPacket(slot, bruh);
        Cornos.minecraft.getNetworkHandler().sendPacket(p);
    }
}
